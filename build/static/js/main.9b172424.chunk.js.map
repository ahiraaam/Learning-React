{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","click","name","age","children","type","onChange","change","value","App","state","persons","id","showpersons","deletePersonHandler","personIndex","Object","toConsumableArray","_this","splice","setState","nameChangedHandler","event","PersonIndex","findIndex","p","objectSpread","target","togglePersonsHandler","doesShow","_this2","this","style","backgroundColor","color","font","border","padding","cursor","margin","map","index","Person_Person","key","classes","length","push","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAqBeA,eAjBA,SAACC,GAMZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,OAA8BN,EAAMO,KAApC,aAAoDP,EAAMQ,IAA1D,cACAP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,UACVR,EAAAC,EAAAC,cAAA,SAAOO,KAAO,OAAOC,SAAUX,EAAMY,OAAQC,MAAOb,EAAMO,UCyJvDO,6MAlKbC,MAAO,CACLC,QAAS,CACP,CAACC,GAAI,OAAQV,KAAK,SAAUC,IAAI,MAChC,CAACS,GAAI,OAAQV,KAAK,QAASC,IAAI,MAC/B,CAACS,GAAI,OAAQV,KAAK,SAAUC,IAAI,OAElCU,aAAa,KAefC,oBAAsB,SAACC,GAErB,IAAMJ,EAAOK,OAAAC,EAAA,EAAAD,CAAOE,EAAKR,MAAMC,SAC/BA,EAAQQ,OAAOJ,EAAY,GAC3BG,EAAKE,SAAS,CAACT,QAAQA,OAGzBU,mBAAqB,SAACC,EAAMV,GAE1B,IAAMW,EAAcL,EAAKR,MAAMC,QAAQa,UAAU,SAAAC,GAC/C,OAAOA,EAAEb,KAAOA,IAGZlB,EAAMsB,OAAAU,EAAA,EAAAV,CAAA,GAAOE,EAAKR,MAAMC,QAAQY,IAEtC7B,EAAOQ,KAAKoB,EAAMK,OAAOnB,MAEzB,IAAMG,EAAOK,OAAAC,EAAA,EAAAD,CAAOE,EAAKR,MAAMC,SAE/BA,EAAQY,GAAe7B,EAEvBwB,EAAKE,SAAS,CAACT,QAAQA,OAGzBiB,qBAAuB,WACrB,IAAMC,EAAWX,EAAKR,MAAMG,YAC5BK,EAAKE,SAAS,CACZP,aAAagB,6EAGR,IAAAC,EAAAC,KAEHpB,EAAW,KACTqB,EAAO,CACXC,gBAAiB,QACjBC,MAAM,QACNC,KAAM,UACNC,OAAQ,iBACRC,QAAS,MACTC,OAAO,UACPC,OAAO,SAONR,KAAKrB,MAAMG,cACZF,EAEEf,EAAAC,EAAAC,cAAA,WACGiC,KAAKrB,MAAMC,QAAQ6B,IAAI,SAAC9C,EAAO+C,GAC9B,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,CACPzC,MAAO,kBAAM6B,EAAKhB,oBAAoB2B,IACtCvC,KAAMR,EAAOQ,KACbC,IAAKT,EAAOS,IACZwC,IAAKjD,EAAOkB,GACZL,OAAU,SAACe,GAAD,OAAUQ,EAAKT,mBAAmBC,EAAM5B,EAAOkB,UAQ/DoB,EAAMC,gBAAgB,OAOxB,IAAMW,EAAS,GASf,OANGb,KAAKrB,MAAMC,QAAQkC,QAAS,GAC7BD,EAAQE,KAAK,OAEZf,KAAKrB,MAAMC,QAAQkC,QAAQ,GAC5BD,EAAQE,KAAK,QAGblD,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAY6C,EAAQG,KAAK,MAA5B,oBACAnD,EAAAC,EAAAC,cAAA,UACEkC,MAAQA,EACRhC,QAAS+B,KAAKH,sBAFhB,kBAICjB,UA/GSqC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b172424.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css'\r\n//mport Radium from 'radium';\r\n\r\nconst person = (props)=> {\r\n    /*const style ={\r\n        '@media(min-width: 500px)':{\r\n            width: '400px'\r\n        }\r\n    }*/\r\n    return (\r\n        <div className='Person' /*style={style}*/>\r\n            <p onClick={props.click}>I'm {props.name} and I am {props.age} years old</p>\r\n            <p>{props.children}</p>\r\n            <input type = \"text\" onChange={props.change} value={props.name}></input>\r\n        </div>\r\n\r\n    \r\n    )\r\n};\r\n\r\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person';\n//import Radium, {StyleRoot}from 'radium';\nclass App extends Component {\n  state ={\n    persons :[\n      {id: \"aaaa\", name:'Ahiram', age:'20'},\n      {id: \"dddd\", name:'Paola', age:'20'},\n      {id: \"wwww\", name:'Regina', age:'20'},\n    ],\n    showpersons: false\n  }\n\n  /*switchNameHandler = (newName) =>{\n    console.log('OK')\n    //DON'T DO THIS this.state.persons[0].name='Shrek';\n    this.setState({\n      persons: [\n      {name:newName, age:'20'},\n      {name:'Paola', age:'20'},\n      {name:'Regina', age:'30'},\n      ]\n    })\n  }*/\n\n  deletePersonHandler = (personIndex) =>{\n    //const persons = this.state.persons.slice() //obtenemos personas\n    const persons = [...this.state.persons]\n    persons.splice(personIndex,1) // eliminamos persona con ese index\n    this.setState({persons:persons}) //actualizamos personas en el estado\n  }\n\n  nameChangedHandler = (event,id) =>{\n    //Encontramos a la persona en el arreglo por el index\n    const PersonIndex = this.state.persons.findIndex(p =>{\n      return p.id === id\n    })\n    //creamos a la persona quetiene ese index\n    const person = {...this.state.persons[PersonIndex]};\n    //le asignamos a la persona el nuevo nombre que escribimos\n    person.name=event.target.value;\n    //hacemos una copia del arreglo original par no afectarlo\n    const persons = [...this.state.persons]\n    //a ese arreglo le agregamos la persona nteriormente creada en el index indicado\n    persons[PersonIndex] = person \n    //asignamos el estado al nuevo arreglo ya modificados\n    this.setState({persons:persons})\n  }\n  //aparecer o desaparecer el div según corresponda\n  togglePersonsHandler = () =>{\n    const doesShow = this.state.showpersons\n    this.setState({\n      showpersons:!doesShow\n    })\n  }\n  render() {\n    //aquí es código normal\n    let persons =  null;\n    const style ={\n      backgroundColor: 'green',\n      color:'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor:'pointer',\n      margin:'0% 5%',\n      /*':hover':{\n        backgroundColor: 'lightgreen',\n        color:'black'\n      }*/\n     \n    };\n    if(this.state.showpersons){\n      persons = (\n        \n        <div >\n          {this.state.persons.map((person,index) =>{\n            return <Person \n            click={() => this.deletePersonHandler(index)}\n            name={person.name} \n            age={person.age}\n            key={person.id}\n            change = {(event)=> this.nameChangedHandler(event,person.id)}\n            >\n            \n            </Person>\n          })}\n           \n        </div>\n      );\n      style.backgroundColor='red';\n      /*style[':hover']={\n        backgroundColor: 'salmon',\n        color:'black'\n      }*/\n      \n    }\n    const classes =[]\n    //let classes = ['red','bold'].join(' ');\n\n    if(this.state.persons.length <=2){\n      classes.push('red') //classes = ['red']\n    }\n    if(this.state.persons.length<=1){\n      classes.push('bold') //classes =['red','bold']\n    }\n    return (\n      <div className= 'App'>\n        <h1>Hola, soy Ahiram</h1>\n        <p className ={classes.join(' ')}>Tengo 20 años</p>\n        <button\n          style ={style}\n          onClick={this.togglePersonsHandler}>Toggle Persons</button>\n       \n        {persons}\n        \n        \n      </div>\n\n    );\n    //return React.createElement('div',{className: 'App' },React.createElement('h1',null,'Hola,Soy Ahiram'))\n  }\n}\n/*\nconst app = props => {\n    const [personsState,setPersonsState] = useState (\n      {\n        persons :[\n          {name:'Ahiram', age:'20'},\n          {name:'Paola', age:'20'},\n          {name:'Regina', age:'20'},\n        ]\n    });\n\n    const [otherState,setOtherState] = useState('other value')\n    console.log(personsState,otherState)\n    const switchNameHandler = () =>{\n        console.log('OK')\n        //DON'T DO THIS this.state.persons[0].name='Shrek';\n        setPersonsState({persons: [\n          {name:'Shrek', age:'20'},\n          {name:'Paola', age:'20'},\n          {name:'Regina', age:'30'},\n        ]\n      \n    });\n      }\n    return (\n      <div className= 'App'>\n        <h1>Hola, soy Ahiram</h1>\n        <p>Tengo 20 años</p>\n        <button onClick={switchNameHandler}>Switch Name</button>\n        <Person name={personsState.persons[0].name} age={personsState.persons[0].age}/>\n        <Person name={personsState.persons[1].name} age={personsState.persons[1].age}>\n          My hobbie is stalking\n        </Person>\n        <Person name={personsState.persons[2].name} age={personsState.persons[2].age}/>\n        \n      </div>\n    );\n\n    */\n    //return React.createElement('div',{className: 'App' },React.createElement('h1',null,'Hola,Soy Ahiram'))\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}